const Etape = require('../models/etape');
const { Activit√© } = require('../models/activit√©'); 
const EtapeActivite = require('../models/etapeActivite');
const moment = require('moment');
const mongoose = require("mongoose");

function ajouterJoursOuvrables(date, jours) {
  let result = moment(date);
  let ajout√©s = 0;
  
  while (ajout√©s < jours) {
      result = result.add(1, 'days');
      if (result.isoWeekday() !== 6 && result.isoWeekday() !== 7) { // 6 = Samedi, 7 = Dimanche
          ajout√©s++;
      }
  }
  return result.toDate();
}

exports.calculerDelaisEtapes = async (req, res) => {
  try {
    const { activiteId } = req.body;
    console.log("üü¶ ID re√ßu depuis le frontend :", activiteId);

    if (!activiteId) {
      console.warn("‚ö†Ô∏è ID de l'activit√© manquant");
      return res.status(400).json({ message: "ID de l'activit√© manquant" });
    }

    const activite = await Activit√©.findById(activiteId);
    if (!activite) {
      console.warn("‚ùå Activit√© non trouv√©e avec l'ID :", activiteId);
      return res.status(404).json({ message: "Activit√© non trouv√©e" });
    }

    console.log("‚úÖ Activit√© trouv√©e :", activite);

    const { modeDePassation, organeDeControle } = activite.donn√©esDeBase || {};
    console.log("üìÑ Mode de passation :", modeDePassation);
    console.log("üìÑ Organe de contr√¥le :", organeDeControle);

    if (!modeDePassation) {
      console.warn(`‚ö†Ô∏è Mode de passation introuvable pour l'activit√© ${activiteId}`);
      return res.status(400).json({ message: "Mode de passation introuvable, association annul√©e." });
    }

    let dateDeDemarrage = activite.donn√©esDeBase.dateDeDemarrage;
    console.log("üìÖ Date de d√©marrage :", dateDeDemarrage);

    const etapes = await Etape.find({ modeDePassation }).sort({ NumEtape: 1 });

    if (etapes.length === 0) {
      console.warn("‚ö†Ô∏è Aucune √©tape trouv√©e pour ce mode de passation :", modeDePassation);
      return res.status(404).json({ message: "Aucune √©tape trouv√©e pour cette activit√©" });
    }

    console.log(`üìã ${etapes.length} √©tapes trouv√©es et tri√©es`);

    let dateCourante = dateDeDemarrage;

    for (let etape of etapes) {
      let delaiGlobal = organeDeControle === "CCMP" ? etape.delaiGlobalCCMP : etape.delaiGlobalDNCMP;
      let delaiPrevu = ajouterJoursOuvrables(dateCourante, delaiGlobal);
      let delaiReel = ajouterJoursOuvrables(dateCourante, delaiGlobal);
       let delaiReelPrevisionnel = ajouterJoursOuvrables(dateCourante, delaiGlobal);
      let numEtape = etape.NumEtape;
      let statutEtape = etape.statutEtape;
      let niveauExecutions = etape.niveauExecution;

      console.log(`üîÑ Traitement de l'√©tape ${numEtape} (ID: ${etape._id})`);
      console.log(`  ‚û§ D√©lai global : ${delaiGlobal}`);
      console.log(`  ‚û§ Date de d√©marrage : ${dateCourante}`);
      console.log(`  ‚û§ Date pr√©vue : ${delaiPrevu}`);

      const resultatUpdate = await EtapeActivite.findOneAndUpdate(
        { activit√©: activite._id, etape: etape._id },
        {
          $set: {
            activit√©: activite._id,
            etape: etape._id,
            delaiPrevu,
            delaiGlobal,
            delaiReel,
            delaiReelPrevisionnel,
            dateDeDemarrage: dateCourante,
            numEtape,
            statutEtape,
            niveauExecutions
          },
        },
        { upsert: true, new: true }
      );

      console.log("  ‚úÖ √âtape activit√© mise √† jour :", resultatUpdate._id);

      dateCourante = delaiPrevu;
    }

    console.log("‚úÖ Tous les d√©lais ont √©t√© calcul√©s et mis √† jour avec succ√®s.");
     await mettreAJourStatuts(activiteId);
    await mettreAJourStatutActivite(activiteId);
    res.status(200).json({ message: "D√©lais des √©tapes calcul√©s et mis √† jour avec l'encha√Ænement correct" });
  } catch (error) {
    console.error("‚ùå Erreur lors du calcul des d√©lais :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

async function fetchActivitesSansEtapes() {
  try {
    const activitesAvecEtapes = await EtapeActivite.distinct('activit√©');
    const activitesSansEtapes = await Activit√©.find({ _id: { $nin: activitesAvecEtapes } });

    console.log(`‚úÖ ${activitesSansEtapes.length} activit√©(s) sans √©tapes trouv√©e(s)`);
    return activitesSansEtapes;
  } catch (error) {
    console.error("Erreur serveur lors de la r√©cup√©ration des activit√©s sans √©tapes :", error);
    return [];
  }
}

exports.associerActivitesSansEtapes = async (req, res) => {
  try {
    console.log("üîÑ D√©but de l'association des activit√©s sans √©tapes...");

    const activitesSansEtapes = await fetchActivitesSansEtapes();

    if (activitesSansEtapes.length === 0) {
      console.log("‚ö†Ô∏è Aucune activit√© sans √©tapes trouv√©e.");
      return res.status(404).json({ message: "Aucune activit√© sans √©tapes." });
    }

    for (let activite of activitesSansEtapes) {
      // Simuler un appel d'API pour r√©cup√©rer le r√©sultat
      const response = {
        status: (code) => ({
          json: (msg) => {
            console.log(`üìù R√©ponse simul√©e [${code}]:`, msg);
            return { code, msg };
          },
        }),
      };

      const result = await exports.calculerDelaisEtapes({ body: { activiteId: activite._id } }, response);

      if (result?.code !== 200) {
        continue; 
      }
    }

    res.status(200).json({ message: "Les activit√©s valides ont √©t√© associ√©es avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de l'association :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};

exports.getActivitesAvecEtapes = async (req, res) => {
  try {
    // Extraction des param√®tres de la requ√™te
    const { typeDeMarch√©, modeDePassation, numR√©f, pole } = req.query;
    console.log("Param√®tres de la requ√™te re√ßus :", { typeDeMarch√©, modeDePassation, numR√©f, pole });

    // R√©cup√©ration des IDs des activit√©s associ√©es √† des √©tapes
    const activitesAvecEtapesIds = await EtapeActivite.distinct('activit√©');
    
    // V√©rification si des activit√©s avec √©tapes existent
    if (activitesAvecEtapesIds.length === 0) {
      console.log("Aucune activit√© trouv√©e avec des √©tapes.");
      return res.status(200).json([]);
    }

    // Construction du filtre pour les activit√©s
    const filter = { _id: { $in: activitesAvecEtapesIds } };

    // Application des filtres additionnels si pr√©sents
    if (typeDeMarch√©) {
      filter["donn√©esDeBase.typeDeMarch√©"] = typeDeMarch√©;
      console.log("Filtre appliqu√© - Type de march√© :", typeDeMarch√©);
    }

    if (modeDePassation) {
      filter["donn√©esDeBase.modeDePassation"] = modeDePassation;
      console.log("Filtre appliqu√© - Mode de passation :", modeDePassation);
    }

    if (numR√©f) {
      filter["donn√©esDeBase.numR√©f"] = numR√©f;
      console.log("Filtre appliqu√© - Num√©ro de r√©f√©rence :", numR√©f);
    }

    if (pole) {
      filter["donn√©esDeBase.pole"] = pole;
      console.log("Filtre appliqu√© - P√¥le :", pole);
    }

    // R√©cup√©ration des activit√©s filtr√©es
    const activit√©sFiltr√©es = await Activit√©.find(filter);
    console.log("Activit√©s filtr√©es :", activit√©sFiltr√©es);

    // V√©rification si des activit√©s filtr√©es ont √©t√© trouv√©es
    if (activit√©sFiltr√©es.length === 0) {
      console.log("Aucune activit√© trouv√©e avec les filtres appliqu√©s.");
      return res.status(200).json([]);
    }

    // Renvoi des activit√©s filtr√©es
    res.status(200).json(activit√©sFiltr√©es);
  } catch (error) {
    // Gestion des erreurs
    console.error("‚ùå Erreur lors de la r√©cup√©ration des activit√©s (filtr√©es ou non) :", error);
    res.status(500).json({
      error: "Une erreur s'est produite lors de la r√©cup√©ration des activit√©s avec √©tapes.",
    });
  }
};

exports.getEtapesByActivite = async (req, res) => {
  try {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "ID d'activit√© invalide" });
    }
    const activit√©Id = new mongoose.Types.ObjectId(id);

    const activit√©AvecEtapes = await EtapeActivite.find({ activit√©: activit√©Id })
      .populate({
        path: 'activit√©', 
        model: 'Activit√©'
      })
      .populate({
        path: 'etape', 
        model: 'Etape'
      });

    if (!activit√©AvecEtapes || activit√©AvecEtapes.length === 0) {
      return res.status(404).json({ message: "Aucune √©tape trouv√©e pour cette activit√©" });
    }

    res.status(200).json(activit√©AvecEtapes);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©tapes :", error);
    res.status(500).json({ message: "Erreur du serveur" });
  }
};

exports.ajouterDelaiReel = async (req, res) => {
  const { activiteId, etapeId, delaiReel } = req.body;
  try {
    const activite = await Activit√©.findById(activiteId);
    if (!activite) {
      return res.status(404).json({ message: 'Activit√© non trouv√©e' });
    }
   
    const objectIdEtapeId = new mongoose.Types.ObjectId(etapeId);
    const etapeActivite = await EtapeActivite.findOne({ _id: objectIdEtapeId });

    if (!etapeActivite) {
      return res.status(404).json({ message: '√âtape non trouv√©e pour cette activit√©' });
    }
    etapeActivite.delaiReelPrevisionnel = new Date(delaiReel);
    etapeActivite.delaiReel = new Date(delaiReel);
    etapeActivite.Confirmer = "OK";
    await etapeActivite.save();
   
    const etapes = await EtapeActivite.find({ activit√©: activiteId }).sort({ numEtape: 1 });
    
    let miseAJour = false;
    let dateDeReference = new Date(etapeActivite.delaiReelPrevisionnel); 

    for (let i = 0; i < etapes.length; i++) {
      const etape = etapes[i];

      if (miseAJour) {
        const joursGlobal = parseInt(etape.delaiGlobal);
        dateDeReference = ajouterJoursOuvrables(dateDeReference, joursGlobal);
        etape.delaiReelPrevisionnel = dateDeReference;
        etape.delaiReel = dateDeReference;
        await etape.save();
      }

      if (etape._id.equals(etapeActivite._id)) {
        miseAJour = true;
        console.log(`üü¢ D√©but du recalcul √† partir de l'√©tape : ${etape.numEtape}`);
      }
    }
    await mettreAJourStatuts(activiteId);
    await mettreAJourStatutActivite(activiteId);

    return res.status(200).json({
      message: 'D√©lai r√©el mis √† jour avec succ√®s et √©tapes suivantes recalcul√©es',
    });

  } catch (err) {
    console.error("‚ùå Erreur lors de la mise √† jour du d√©lai r√©el :", err);
    return res.status(500).json({ message: 'Erreur interne du serveur' });
  }
};

async function mettreAJourStatuts(activiteId) {
  const aujourdHui = moment().startOf('day');
  const etapes = await EtapeActivite.find({ activit√©: activiteId }).sort({ numEtape: 1 });

  for (let i = 0; i < etapes.length; i++) {
    const etape = etapes[i];
    const delaiReelPrevisionnel = moment(etape.delaiReelPrevisionnel).startOf('day');
    const etapePrecedente = i > 0 ? etapes[i - 1] : null;
    let nouveauStatut = '√Ä venir';

    if (aujourdHui.isAfter(delaiReelPrevisionnel)) {
      nouveauStatut = 'Termin√©';
    } else if (
      etapePrecedente &&
      etapePrecedente.statut === 'Termin√©' &&
      aujourdHui.isSameOrBefore(delaiReelPrevisionnel)
    ) {
      nouveauStatut = 'En cours';
    } else if (
      etapePrecedente &&
      etapePrecedente.statut !== 'Termin√©' &&
      aujourdHui.isBefore(delaiReelPrevisionnel)
    ) {
      nouveauStatut = '√Ä venir';
    }

    // Mettre √† jour seulement si le statut a chang√©
    if (etape.statut !== nouveauStatut) {
      etape.statut = nouveauStatut;
      await etape.save();
    }
  }
}

async function mettreAJourStatutActivite(activiteId) {
  try {
    const etapes = await EtapeActivite.find({ activit√©: activiteId });

    if (etapes.length === 0) {
      console.log("‚ö†Ô∏è Aucune √©tape trouv√©e pour l'activit√© :", activiteId);
      return;
    }

    const tousTermines = etapes.every(e => e.statut === 'Termin√©');
    const auMoinsUneEnCours = etapes.some(e => e.statut === 'En cours');
    const tousAVenir = etapes.every(e => e.statut === '√Ä venir');

    let nouveauStatut;

    if (tousTermines) {
      nouveauStatut = 'Termin√©';
    } else if (auMoinsUneEnCours) {
      nouveauStatut = 'En cours';
    } else if (tousAVenir) {
      nouveauStatut = 'Non d√©marr√©e';
    } else {
      nouveauStatut = 'mixte'; // Cas mixte
      console.log("Mixte:", nouveauStatut)
    }

    const activite = await Activit√©.findById(activiteId);
    if (!activite) {
      console.log("‚ùå Activit√© introuvable :", activiteId);
      return;
    }

    if (activite.donn√©esDeBase?.statutActivite !== nouveauStatut) {
      activite.donn√©esDeBase.statutActivite = nouveauStatut;
      await activite.save();
    } else {
      console.log("‚ÑπÔ∏è Statut de l'activit√© d√©j√† √† jour :", nouveauStatut);
    }

     await mettreAJourNiveauExecution(activiteId);
  } catch (err) {
    console.error("‚ùå Erreur lors de la mise √† jour du statut de l'activit√© :", err);
  }
}

exports.filtrerActivitiesEnCours = async (req, res) => {
  try {
    const { typeDeMarch√©, modeDePassation, recherche, pole } = req.query;

    // Cr√©ation dynamique du filtre
    const filter = { 'donn√©esDeBase.statutActivite': 'En cours' };
    if (typeDeMarch√©) filter['donn√©esDeBase.typeDeMarch√©'] = typeDeMarch√©;
    if (modeDePassation) filter['donn√©esDeBase.modeDePassation'] = modeDePassation;
    if (recherche) {
  filter["$or"] = [
    { 'donn√©esDeBase.numR√©f': { $regex: recherche, $options: "i" } },
    { 'donn√©esDeBase.description': { $regex: recherche, $options: "i" } }
  ];
}
     if (pole) filter['donn√©esDeBase.pole'] = pole;


    console.log("üîç Filtres appliqu√©s :", filter);

    const activitesEnCours = await Activit√©.find(filter);
    console.log("üìã Activit√©s en cours trouv√©es :", activitesEnCours.length);

    if (!activitesEnCours.length) {
      return res.status(200).json([]);
    }
    
    const idsActivites = activitesEnCours.map(act => act._id);
    console.log("üÜî IDs des activit√©s :", idsActivites);

    // Recherche des √©tapes associ√©es
    const etapes = await EtapeActivite.find({ activit√©: { $in: idsActivites } })
      .populate('activit√©')
      .populate('etape');

    console.log("üìå √âtapes trouv√©es :", etapes.length);

    if (!etapes.length) {
      return res.status(200).json([]);
    }    

    // Regroupement par activit√©
    const regroupement = {};

    etapes.forEach(etapeActivite => {
      const idActivite = etapeActivite.activit√©._id.toString();

      if (!regroupement[idActivite]) {
        regroupement[idActivite] = {
          activit√©: etapeActivite.activit√©.toObject(),
          √©tapes: []
        };
      }

      const etapeClean = etapeActivite.toObject();
      delete etapeClean.activit√©;
      etapeClean.etape = etapeActivite.etape.toObject();

      regroupement[idActivite].√©tapes.push(etapeClean);
    });

    console.log("üì¶ Regroupement par activit√© :", Object.keys(regroupement).length);

    // Filtrage des √©tapes : on garde l'√©tape "En cours" et la suivante
    const result = Object.values(regroupement).map(activiteGroup => {
      const etapesTriees = activiteGroup.√©tapes.sort((a, b) => a.etape.ordre - b.etape.ordre);

      const indexEnCours = etapesTriees.findIndex(e => e.statut === 'En cours');
      const etapesAFournir = [];

      if (indexEnCours !== -1) {
        etapesAFournir.push(etapesTriees[indexEnCours]);

        if (etapesTriees[indexEnCours + 1]) {
          etapesAFournir.push(etapesTriees[indexEnCours + 1]);
        }
      }

      return {
        activit√©: activiteGroup.activit√©,
        √©tapes: etapesAFournir
      };
    });

    console.log("‚úÖ R√©sultat final envoy√© au client :", result.length, "activit√©s");

    res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des activit√©s en cours avec √©tapes :", error);
    res.status(500).json({ message: "Erreur du serveur" });
  }
};

exports.filtrerActivitiesTermine = async (req, res) => {
  try {
    const { typeDeMarch√©, modeDePassation, recherche, pole } = req.query;
    
    // Cr√©ation dynamique du filtre
    const filter = { 'donn√©esDeBase.statutActivite': 'Termin√©' };
    if (typeDeMarch√©) filter['donn√©esDeBase.typeDeMarch√©'] = typeDeMarch√©;
    if (modeDePassation) filter['donn√©esDeBase.modeDePassation'] = modeDePassation;
    if (recherche) {
      filter["$or"] = [
        { 'donn√©esDeBase.numR√©f': { $regex: recherche, $options: "i" } },
        { 'donn√©esDeBase.description': { $regex: recherche, $options: "i" } }
      ];
    }
    if (pole) filter['donn√©esDeBase.pole'] = pole;
    
    console.log("üîç Filtres appliqu√©s :", filter);
    
    const activitesTermine = await Activit√©.find(filter);
    console.log("üìã Activit√©s termin√© trouv√©es :", activitesTermine.length);
    
    if (!activitesTermine.length) {
      return res.status(200).json([]);
    }
    
    const idsActivites = activitesTermine.map(act => act._id);
    console.log("üÜî IDs des activit√©s :", idsActivites);
    
    // Recherche des √©tapes associ√©es
    const etapes = await EtapeActivite.find({ activit√©: { $in: idsActivites } })
      .populate('activit√©')
      .populate('etape');
    
    console.log("üìå √âtapes trouv√©es :", etapes.length);
    
    if (!etapes.length) {
      return res.status(200).json([]);
    }
    
    // Regroupement par activit√©
    const regroupement = {};
    etapes.forEach(etapeActivite => {
      const idActivite = etapeActivite.activit√©._id.toString();
      if (!regroupement[idActivite]) {
        regroupement[idActivite] = {
          activit√©: etapeActivite.activit√©.toObject(),
          √©tapes: []
        };
      }
      const etapeClean = etapeActivite.toObject();
      delete etapeClean.activit√©;
      etapeClean.etape = etapeActivite.etape.toObject();
      regroupement[idActivite].√©tapes.push(etapeClean);
    });
    
    console.log("üì¶ Regroupement par activit√© :", Object.keys(regroupement).length);
    
    // Filtrage des √©tapes : on garde la derni√®re √©tape termin√©e
    const result = Object.values(regroupement).map(activiteGroup => {
      const etapesTriees = activiteGroup.√©tapes.sort((a, b) => a.etape.ordre - b.etape.ordre);
      const etapesAFournir = [];
      
      // Trouver la derni√®re √©tape termin√©e
      let derniereEtapeTerminee = null;
      let dateDebut = null;
      let dateFin = null;
      
      for (let i = etapesTriees.length - 1; i >= 0; i--) {
        const etape = etapesTriees[i];
        if (etape.delaiReel && etape.statut === 'Termin√©') {
          derniereEtapeTerminee = etape;
          dateFin = etape.delaiReel;
          break;
        }
      }
      
      // Trouver la premi√®re √©tape pour la date de d√©but
      if (etapesTriees.length > 0) {
        const premiereEtape = etapesTriees[0];
        dateDebut = premiereEtape.delaiReel || premiereEtape.delaiPrevu;
      }
      
      if (derniereEtapeTerminee) {
        etapesAFournir.push(derniereEtapeTerminee);
      } else if (etapesTriees.length > 0) {
        // Si aucune √©tape n'est marqu√©e comme termin√©e, prendre la derni√®re
        etapesAFournir.push(etapesTriees[etapesTriees.length - 1]);
        dateFin = etapesTriees[etapesTriees.length - 1].delaiReel || etapesTriees[etapesTriees.length - 1].delaiPrevu;
      }
      
      return {
        activit√©: activiteGroup.activit√©,
        √©tapes: etapesAFournir,
        dateFin: dateFin,
        dateDebut: dateDebut,
        dateCreation: activiteGroup.activit√©.createdAt || activiteGroup.activit√©.dateCreation
      };
    });
    
    console.log("‚úÖ R√©sultat final envoy√© au client :", result.length, "activit√©s");
    res.status(200).json(result);
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des activit√©s termin√© avec √©tapes :", error);
    res.status(500).json({ message: "Erreur du serveur" });
  }
};

exports.filtrerActivitiesNonDemarer = async (req, res) => {
  try {
    const { typeDeMarch√©, modeDePassation, recherche, pole } = req.query;

    // Cr√©ation dynamique du filtre
    const filter = { 'donn√©esDeBase.statutActivite': 'Non d√©marr√©e' };
    if (typeDeMarch√©) filter['donn√©esDeBase.typeDeMarch√©'] = typeDeMarch√©;
    if (modeDePassation) filter['donn√©esDeBase.modeDePassation'] = modeDePassation;
    if (recherche) {
  filter["$or"] = [
    { 'donn√©esDeBase.numR√©f': { $regex: recherche, $options: "i" } },
    { 'donn√©esDeBase.description': { $regex: recherche, $options: "i" } }
  ];
}
     if (pole) filter['donn√©esDeBase.pole'] = pole;


    console.log("üîç Filtres appliqu√©s :", filter);

    const activitesNonDemarer = await Activit√©.find(filter);
    console.log("üìã Activit√©s en cours trouv√©es :", activitesNonDemarer.length);

    if (!activitesNonDemarer.length) {
      return res.status(200).json([]);
    }
    
    const idsActivites = activitesNonDemarer.map(act => act._id);
    console.log("üÜî IDs des activit√©s :", idsActivites);

    // Recherche des √©tapes associ√©es
    const etapes = await EtapeActivite.find({ activit√©: { $in: idsActivites } })
      .populate('activit√©')
      .populate('etape');

    console.log("üìå √âtapes trouv√©es :", etapes.length);

    if (!etapes.length) {
      return res.status(200).json([]);
    }    

    // Regroupement par activit√©
    const regroupement = {};

    etapes.forEach(etapeActivite => {
      const idActivite = etapeActivite.activit√©._id.toString();

      if (!regroupement[idActivite]) {
        regroupement[idActivite] = {
          activit√©: etapeActivite.activit√©.toObject(),
          √©tapes: []
        };
      }

      const etapeClean = etapeActivite.toObject();
      delete etapeClean.activit√©;
      etapeClean.etape = etapeActivite.etape.toObject();

      regroupement[idActivite].√©tapes.push(etapeClean);
    });

    console.log("üì¶ Regroupement par activit√© :", Object.keys(regroupement).length);

    // Filtrage des √©tapes : on garde l'√©tape "En cours" et la suivante
    const result = Object.values(regroupement).map(activiteGroup => {
      const etapesTriees = activiteGroup.√©tapes.sort((a, b) => a.etape.ordre - b.etape.ordre);

      const indexNonDemarer = etapesTriees.findIndex(e => e.statut === 'En cours');
      const etapesAFournir = [];

      if (indexNonDemarer !== -1) {
        etapesAFournir.push(etapesTriees[indexNonDemarer]);

        if (etapesTriees[indexNonDemarer + 1]) {
          etapesAFournir.push(etapesTriees[indexNonDemarer + 1]);
        }
      }

      return {
        activit√©: activiteGroup.activit√©,
        √©tapes: etapesAFournir
      };
    });

    console.log("‚úÖ R√©sultat final envoy√© au client :", result.length, "activit√©s");

    res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des activit√©s non demarer avec √©tapes :", error);
    res.status(500).json({ message: "Erreur du serveur" });
  }
};

exports.filtrerActivitiesAll = async (req, res) => {
  try {
    const { typeDeMarch√©, modeDePassation, recherche, pole } = req.query;

    // Cr√©ation dynamique du filtre
   const filter = { 'donn√©esDeBase.statutActivite': { $in: ['Non d√©marr√©e', 'En cours', 'Termin√©'] } };
    if (typeDeMarch√©) filter['donn√©esDeBase.typeDeMarch√©'] = typeDeMarch√©;
    if (modeDePassation) filter['donn√©esDeBase.modeDePassation'] = modeDePassation;
    if (recherche) {
  filter["$or"] = [
    { 'donn√©esDeBase.numR√©f': { $regex: recherche, $options: "i" } },
    { 'donn√©esDeBase.description': { $regex: recherche, $options: "i" } }
  ];
}
     if (pole) filter['donn√©esDeBase.pole'] = pole;


    console.log("üîç Filtres appliqu√©s :", filter);

    const activit√©Complet = await Activit√©.find(filter);
    console.log("üìã Activit√©s complet trouv√©es :", activit√©Complet.length);

    if (!activit√©Complet.length) {
      return res.status(200).json([]);
    }
    
    const idsActivites = activit√©Complet.map(act => act._id);
    console.log("üÜî IDs des activit√©s :", idsActivites);

    // Recherche des √©tapes associ√©es
    const etapes = await EtapeActivite.find({ activit√©: { $in: idsActivites } })
      .populate('activit√©')
      .populate('etape');

    console.log("üìå √âtapes trouv√©es :", etapes.length);

    if (!etapes.length) {
      return res.status(200).json([]);
    }    

    // Regroupement par activit√©
    const regroupement = {};

    etapes.forEach(etapeActivite => {
      const idActivite = etapeActivite.activit√©._id.toString();

      if (!regroupement[idActivite]) {
        regroupement[idActivite] = {
          activit√©: etapeActivite.activit√©.toObject(),
          √©tapes: []
        };
      }

      const etapeClean = etapeActivite.toObject();
      delete etapeClean.activit√©;
      etapeClean.etape = etapeActivite.etape.toObject();

      regroupement[idActivite].√©tapes.push(etapeClean);
    });

    console.log("üì¶ Regroupement par activit√© :", Object.keys(regroupement).length);

    // Filtrage des √©tapes : on garde l'√©tape "En cours" et la suivante
    const result = Object.values(regroupement).map(activiteGroup => {
      return {
        activit√©: activiteGroup.activit√©,
      };
    });

    console.log("‚úÖ R√©sultat final envoy√© au client :", result.length, "activit√©s");

    res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des activit√©s non demarer avec √©tapes :", error);
    res.status(500).json({ message: "Erreur du serveur" });
  }
};

// Fonction pour mettre √† jour le niveau d'ex√©cution de l'activit√©
async function mettreAJourNiveauExecution(activiteId) {
  try {
    const activite = await Activit√©.findById(activiteId);
    if (!activite) {
      console.log("‚ùå Activit√© introuvable :", activiteId);
      return;
    }

    const etapes = await EtapeActivite.find({ activit√©: activiteId }).sort({ numEtape: 1 });
    if (etapes.length === 0) {
      console.log("‚ö†Ô∏è Aucune √©tape trouv√©e pour l'activit√© :", activiteId);
      return;
    }

    const aujourdHui = moment().startOf('day');
    const dateDebutExecution = activite.donn√©esDeBase.dateDebutExecution;
    let nouveauNiveauExecution = activite.donn√©esDeBase.NiveauEx√©cution;

    // V√©rifier si toutes les √©tapes sont termin√©es
    const toutesEtapesTerminees = etapes.every(etape => {
      const delaiReel = moment(etape.delaiReel).startOf('day');
      return delaiReel.isBefore(aujourdHui) || delaiReel.isSame(aujourdHui);
    });

    // Cas 1: Si toutes les √©tapes sont termin√©es et dateDebutExecution <= aujourd'hui
    if (toutesEtapesTerminees) {
      const derniereEtape = etapes[etapes.length - 1];
      const delaiReelDerniereEtape = moment(derniereEtape.delaiReel).startOf('day');
      
      if (delaiReelDerniereEtape.isBefore(aujourdHui) || delaiReelDerniereEtape.isSame(aujourdHui)) {
        if (dateDebutExecution && moment(dateDebutExecution).startOf('day').isSameOrBefore(aujourdHui)) {
          nouveauNiveauExecution = "Ex√©cution";
        } else {
          nouveauNiveauExecution = "En cours de contractualisation";
        }
      }
    } else {
      // Cas 2: Activit√© en cours - prendre le niveau de l'√©tape en cours
      const etapeEnCours = etapes.find(etape => etape.statut === 'En cours');
      
      if (etapeEnCours && etapeEnCours.niveauExecutions) {
        nouveauNiveauExecution = etapeEnCours.niveauExecutions;
      } else {
        // Si aucune √©tape en cours, prendre le niveau de la premi√®re √©tape non termin√©e
        const prochineEtape = etapes.find(etape => etape.statut === '√Ä venir');
        if (prochineEtape && prochineEtape.niveauExecutions) {
          nouveauNiveauExecution = prochineEtape.niveauExecutions;
        }
      }
    }

    // Mettre √† jour seulement si le niveau a chang√©
    if (activite.donn√©esDeBase.NiveauEx√©cution !== nouveauNiveauExecution) {
      activite.donn√©esDeBase.NiveauEx√©cution = nouveauNiveauExecution;
      await activite.save();
      console.log(`‚úÖ Niveau d'ex√©cution mis √† jour pour l'activit√© ${activiteId}: ${nouveauNiveauExecution}`);
    } else {
      console.log(`‚ÑπÔ∏è Niveau d'ex√©cution d√©j√† √† jour pour l'activit√© ${activiteId}: ${nouveauNiveauExecution}`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du niveau d'ex√©cution :", error);
  }
}
