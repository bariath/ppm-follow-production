const Etape = require('../models/etape');
const { Activit√© } = require('../models/activit√©'); 
const EtapeActivite = require('../models/etapeActivite');
const mongoose = require("mongoose");

const getPeriodeDates = (year, startMonth = 1, endMonth = 12) => {
  const yearNum = parseInt(year);
  const startMonthNum = parseInt(startMonth);
  const endMonthNum = parseInt(endMonth);

  if (
    isNaN(yearNum) || isNaN(startMonthNum) || isNaN(endMonthNum) ||
    startMonthNum < 1 || startMonthNum > 12 ||
    endMonthNum < 1 || endMonthNum > 12
  ) {
    throw new Error("Ann√©e ou mois invalides");
  }

  const start = new Date(yearNum, startMonthNum - 1, 1);
  const end = new Date(yearNum, endMonthNum, 0, 23, 59, 59, 999);

  return { start, end };
};

const getActivitesPrevu = async (start, end) => {
  return await EtapeActivite.find({
    numEtape: 1,
    delaiPrevu: { $gte: start, $lte: end }
  });
};

// Fonction g√©n√©rique pour l'agr√©gation par mode ou type
const getActiviteAggregate = async (ids, groupField, sumField = "montantEstimatif") => {
  return await Activit√©.aggregate([
    { $match: { _id: { $in: ids } } },
    {
      $group: {
        _id: `$donn√©esDeBase.${groupField}`,
        count: { $sum: 1 },
        [`total${sumField.charAt(0).toUpperCase() + sumField.slice(1)}`]: {
          $sum: { $ifNull: [`$donn√©esDeBase.${sumField}`, 0] }
        }
      }
    }
  ]);
};

const getActiviteParMode = async (ids) => {
  return await getActiviteAggregate(ids, "modeDePassation");
};

const getActiviteParType = async (ids) => {
  return await getActiviteAggregate(ids, "typeDeMarch√©");
};

const getActiviteDemarees = async (start, end) => {
  const today = new Date();
  return await EtapeActivite.find({
    numEtape: 1,
    delaiPrevu: { $gte: start, $lte: end },
    delaiReel: { $lte: today } 
  });
};

const getActiviteDemareeParMode = async (ids) => {
  return await getActiviteAggregate(ids, "modeDePassation", "montantAttribu√©");
};

const getActiviteDemareeParType = async (ids) => {
  return await getActiviteAggregate(ids, "typeDeMarch√©", "montantAttribu√©");
};

// Fonction g√©n√©rique pour r√©cup√©rer les activit√©s par statut d'√©tape
const getActivitesByStatutEtape = async (ids, statutEtape) => {
  const today = new Date();
  
  const etapes = await EtapeActivite.find({
    activit√©: { $in: ids },
    statutEtape,
    delaiReel: { $lte: today }  
  })
    .populate("activit√©")
    .populate("etape")
    .sort({ NumEtape: -1 });

  // Utilisation d'un Map pour √©viter les doublons et ne garder que la derni√®re √©tape par activit√©
  const uniqueMap = new Map();
  for (const e of etapes) {
    if (e.activit√© && !uniqueMap.has(e.activit√©._id.toString())) {
      uniqueMap.set(e.activit√©._id.toString(), e);
    }
  }

  return Array.from(uniqueMap.values());
};

// Toutes les fonctions sp√©cifiques utilisant la fonction g√©n√©rique
const getActivitesDossierAuControle = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Dossier au contr√¥le");
};

const getActivitesPublicationEnCours = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Publication en cours");
};

const getActivitesEvaluationEnCours = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Evaluation en cours");
};

const getActivitesRapportAuControle = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Rapport au Contr√¥le");
};

const getActivitesNotification = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Notification");
};

const getActivitesContratAuControlePourAvis = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Contrat au contr√¥le pour avis");
};

const getActivitesApprobation = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Approbation");
};

const getActivitesContratEnregistrement = async (ids) => {
  return await getActivitesByStatutEtape(ids, "Contrat √† l'enregistrement");
};

const getActivitesBydateDeReceptionOrdreService = async (ids) => {
  const today = new Date();
  return await Activit√©.find({
  _id: { $in: ids },
 "donn√©esDeBase.dateDeReceptionOrdreService": { $lte: today }
});
};

exports.getStatistiquesParPeriode = async (req, res) => {
  try {
    const { year, startMonth, endMonth } = req.query;

    console.log("üì• Requ√™te re√ßue avec :", { year, startMonth, endMonth });

    if (!year) {
      console.warn("‚ö†Ô∏è L'ann√©e est requise.");
      return res.status(400).json({ error: "L'ann√©e est requise." });
    }

    const { start, end } = getPeriodeDates(year, startMonth, endMonth);
    console.log("üìÖ P√©riode calcul√©e :", { start, end });

    const activites = await getActivitesPrevu(start, end);
    console.log(`üîç ${activites.length} activit√©(s) trouv√©e(s) (filtr√©es par p√©riode)`);

    const idsActivitesFiltrees = activites.map(e => e.activit√©);
    console.log("üÜî IDs des activit√©s filtr√©es :", idsActivitesFiltrees);

    // Ex√©cution en parall√®le des requ√™tes d'agr√©gation pour les activit√©s pr√©vues
    const [activiteParMode, activit√©ParTypeMarch√©, ReceptionOrdreService] = await Promise.all([
      getActiviteParMode(idsActivitesFiltrees),
      getActiviteParType(idsActivitesFiltrees),
      getActivitesBydateDeReceptionOrdreService(idsActivitesFiltrees)
    ]);
    
    console.log("üìä Activit√©s par mode de passation :", activiteParMode);
    console.log("üìä Activit√©s par type de march√© :", activit√©ParTypeMarch√©);
    console.log("üìä Activit√©s par ordre de service :", ReceptionOrdreService);

    const activiteDemarer = await getActiviteDemarees(start, end);
    console.log(`üöÄ ${activiteDemarer.length} activit√©(s) d√©marr√©e(s)`);

    const idsActiviteDemarerFiltrees = activiteDemarer.map(e => e.activit√©);
    console.log("üÜî IDs des activit√©s d√©marr√©es :", idsActiviteDemarerFiltrees);

    // Ex√©cution en parall√®le de toutes les requ√™tes restantes
    const [
      activiteDemarerParMode,
      activit√©DemarerParTypeMarch√©,
      ActivitesDossierAuControle,
      ActivitesPublicationEnCours,
      ActivitesEvaluationEnCours,
      ActivitesRapportAuControle,
      ActivitesContratAuControlePourAvis,
      ActivitesNotification,
      ActivitesApprobation,
      ActivitesContratEnregistrement
    ] = await Promise.all([
      getActiviteDemareeParMode(idsActiviteDemarerFiltrees),
      getActiviteDemareeParType(idsActiviteDemarerFiltrees),
      getActivitesDossierAuControle(idsActiviteDemarerFiltrees),
      getActivitesPublicationEnCours(idsActiviteDemarerFiltrees),
      getActivitesEvaluationEnCours(idsActiviteDemarerFiltrees),
      getActivitesRapportAuControle(idsActiviteDemarerFiltrees),
      getActivitesContratAuControlePourAvis(idsActiviteDemarerFiltrees),
      getActivitesNotification(idsActiviteDemarerFiltrees),
      getActivitesApprobation(idsActiviteDemarerFiltrees),
      getActivitesContratEnregistrement(idsActiviteDemarerFiltrees)
    ]);

    console.log("üìä Activit√©s d√©marr√©es par mode de passation :", activiteDemarerParMode);
    console.log("üìä Activit√©s d√©marr√©es par type de march√© :", activit√©DemarerParTypeMarch√©);
    console.log("‚úÖ Dossier au contr√¥le :", ActivitesDossierAuControle.length);
    console.log("‚úÖ Publication en cours :", ActivitesPublicationEnCours.length);
    console.log("‚úÖ Evaluation en cours:", ActivitesEvaluationEnCours.length);
    console.log("‚úÖ Rapport au Contr√¥le :", ActivitesRapportAuControle.length);
    console.log("‚úÖ Contrat au contr√¥le pour avis:", ActivitesContratAuControlePourAvis.length);
    console.log("‚úÖ Notification :", ActivitesNotification.length);
    console.log("‚úÖ Approbation :", ActivitesApprobation.length);
    console.log("‚úÖ Contrat √† l'enregistrement :", ActivitesContratEnregistrement.length);

    res.json({
      activiteParMode,
      activit√©ParTypeMarch√©,
      ReceptionOrdreService,
      activiteDemarerParMode,
      activit√©DemarerParTypeMarch√©,
      ActivitesDossierAuControle,
      ActivitesPublicationEnCours,
      ActivitesEvaluationEnCours,
      ActivitesRapportAuControle,
      ActivitesContratAuControlePourAvis,
      ActivitesNotification,
      ActivitesApprobation,
      ActivitesContratEnregistrement
    });      

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des statistiques :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
};