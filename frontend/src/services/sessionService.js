// src/services/sessionService.js
import axios from 'axios';

class SessionService {
  constructor() {
    this.lastCheck = 0;
    this.checkInterval = 5 * 60 * 1000; // 5 minutes
    this.isChecking = false;
  }

  // V√©rifier la session avec cache pour √©viter trop de requ√™tes
  async checkSession(force = false) {
    const now = Date.now();
    
    // Si on a v√©rifi√© r√©cemment et ce n'est pas forc√©, pas besoin de re-v√©rifier
    if (!force && (now - this.lastCheck) < this.checkInterval && !this.isChecking) {
      console.log('üïê Utilisation du cache de session (v√©rifi√© r√©cemment)');
      return { valid: true, cached: true };
    }

    // √âviter les v√©rifications simultan√©es
    if (this.isChecking) {
      console.log('‚è≥ V√©rification de session d√©j√† en cours...');
      return new Promise((resolve) => {
        const checkReady = () => {
          if (!this.isChecking) {
            resolve(this.checkSession(false));
          } else {
            setTimeout(checkReady, 100);
          }
        };
        checkReady();
      });
    }

    this.isChecking = true;
    
    try {
      console.log('üîÑ V√©rification de la session c√¥t√© serveur...');
      const response = await axios.get('/api/check-session', {
        timeout: 5000 // Timeout de 5 secondes
      });
      
      this.lastCheck = now;
      this.isChecking = false;
      
      return {
        valid: true,
        user: response.data.user,
        cached: false
      };
      
    } catch (error) {
      this.isChecking = false;
      console.log('‚ùå V√©rification session √©chou√©e:', error.response?.data?.error || error.message);
      
      // En cas d'erreur r√©seau, on peut √™tre plus permissif
      if (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR') {
        console.log('‚ö†Ô∏è Erreur r√©seau, maintien de la session locale temporairement');
        return {
          valid: true,
          networkError: true,
          cached: false
        };
      }
      
      return {
        valid: false,
        error: error.response?.data?.error || 'Erreur de v√©rification de session',
        cached: false
      };
    }
  }

  // Forcer une nouvelle v√©rification (utile apr√®s des actions importantes)
  async forceCheck() {
    return await this.checkSession(true);
  }

  // R√©initialiser le cache (utile apr√®s d√©connexion)
  resetCache() {
    this.lastCheck = 0;
    this.isChecking = false;
  }
}

// Instance unique du service
export const sessionService = new SessionService();